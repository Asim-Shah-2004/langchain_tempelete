[[["abae526c-149e-4f65-bd99-35b514003134",{"pageContent":"transmission unit, MTU), and then setting the MSS to ensure that a TCP segment\r\n(when encapsulated in an IP datagram) plus the TCP/IP header length (typically 40\r\nbytes) will fit into a single link-layer frame. Both Ethernet and PPP link-layer protocols have an MSS of 1,500 bytes. Approaches have also been proposed for discovering the path MTU—the largest link-layer frame that can be sent on all links from\r\nsource to destination [RFC 1191]—and setting the MSS based on the path MTU\r\nvalue. Note that the MSS is the maximum amount of application-layer data in the\r\nsegment, not the maximum size of the TCP segment including headers. (This terminology is confusing, but we have to live with it, as it is well entrenched.)\r\nTCP pairs each chunk of client data with a TCP header, thereby forming TCP\r\nsegments. The segments are passed down to the network layer, where they are separately encapsulated within network-layer IP datagrams. The IP datagrams are then\r\nsent into the network. When TCP receives a segment at the other end, the segment’s\r\ndata is placed in the TCP connection’s receive buffer, as shown in Figure 3.28. The\r\napplication reads the stream of data from this buffer. Each side of the connection has\r\nits own send buffer and its own receive buffer. (You can see the online flow-control\r\napplet at http://www.awl.com/kurose-ross, which provides an animation of the send\r\nand receive buffers.)\r\nWe see from this discussion that a TCP connection consists of buffers, variables, and a socket connection to a process in one host, and another set of buffers,\r\nvariables, and a socket connection to a process in another host. As mentioned earlier, no buffers or variables are allocated to the connection in the network elements\r\n(routers, switches, and repeaters) between the hosts.\r\n3.5.2 TCP Segment Structure\r\nHaving taken a brief look at the TCP connection, let’s examine the TCP segment\r\nstructure. The TCP segment consists of header fields and a data field. The data\r\nfield contains a chunk of application data. As mentioned above, the MSS limits the\r\nProcess\r\nwrites data\r\nProcess\r\nreads data\r\nTCP\r\nsend\r\nbuffer\r\nSocket\r\nTCP\r\nreceive\r\nbuffer\r\nSocket\r\nSegment Segment\r\nFigure 3.28  TCP send and receive buffers\r\n234 CHAPTER 3 • TRANSPORT LAYER\r\nmaximum size of a segment’s data field. When TCP sends a large file, such as an\r\nimage as part of a Web page, it typically breaks the file into chunks of size MSS\r\n(except for the last chunk, which will often be less than the MSS). Interactive applications, however, often transmit data chunks that are smaller than the MSS; for\r\nexample, with remote login applications like Telnet, the data field in the TCP segment is often only one byte. Because the TCP header is typically 20 bytes (12 bytes\r\nmore than the UDP header), segments sent by Telnet may be only 21 bytes in length.\r\nFigure 3.29 shows the structure of the TCP segment. As with UDP, the header\r\nincludes source and destination port numbers, which are used for\r\nmultiplexing/demultiplexing data from/to upper-layer applications. Also, as with\r\nUDP, the header includes a checksum field. A TCP segment header also contains\r\nthe following fields:\r\n• The 32-bit sequence number field and the 32-bit acknowledgment number\r\nfield are used by the TCP sender and receiver in implementing a reliable data\r\ntransfer service, as discussed below.\r\n• The 16-bit receive window field is used for flow control. We will see shortly that\r\nit is used to indicate the number of bytes that a receiver is willing to accept.\r\n• The 4-bit header length field specifies the length of the TCP header in 32-bit\r\nwords. The TCP header can be of variable length due to the TCP options field.\r\nSource port #\r\nInternet checksum\r\nHeader\r\nlength Unused\r\nURG\r\nACK\r\nPSH\r\nRST\r\nSYN\r\nFIN\r\n32 bits\r\nDest port #\r\nReceive window\r\nUrgent data pointer\r\nSequence number\r\nAcknowledgment number\r\nOptions\r\nData\r\nFigure 3.29  TCP segment structure\r\n3.5 • CONNECTION-ORIENTED TRANSPORT: TCP 235\r\n(Typically, the options field is empty, so that the length of the typical TCP header\r\nis 20 bytes.)\r\n• The optional and variable-length options field is used when a sender and\r\nreceiver negotiate the maximum segment size (MSS) or as a window scaling factor for use in high-speed networks. A time-stamping option is also defined. See\r\nRFC 854 and RFC 1323 for additional details.\r\n• The flag field contains 6 bits. The ACK bit is used to indicate that the value carried in the acknowledgment field is valid; that is, the segment contains an\r\nacknowledgment for a segment that has been successfully received. The RST,\r\nSYN, and FIN bits are used for connection setup and teardown, as we will discuss at the end of this section. Setting the PSH bit indicates that the receiver\r\nshould pass the data to the upper layer immediately. Finally, the URG bit is used\r\nto indicate that there is data in this segment that the sending-side upper-layer\r\nentity has marked as “urgent.” The location of the last byte of this urgent data is\r\nindicated by the 16-bit urgent data pointer field. TCP must inform the receiving-side upper-layer entity when urgent data exists and pass it a pointer to the\r\nend of the urgent data. (In practice, the PSH, URG, and the urgent data pointer\r\nare not used. However, we mention these fields for completeness.)","metadata":{"source":"./data.txt","loc":{"lines":{"from":1,"to":87}}}}]],{"0":"abae526c-149e-4f65-bd99-35b514003134"}]